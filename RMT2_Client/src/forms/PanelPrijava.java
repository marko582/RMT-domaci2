/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package forms;

import controller.Controller;
import domain.DrzavaEu;
import domain.Korisnik;
import domain.NacinPrevoza;
import domain.PrijavaPutovanja;
import domain.StavkaPrijave;
import java.io.BufferedReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Windows HD
 */
public class PanelPrijava extends javax.swing.JPanel {

    /**
     * Creates new form panelPrijavaLogged
     */
    public PanelPrijava() {
        initComponents();
        try {
            napuniCmbDrzave();
            napuniCmbNacinPrevoza();
        } catch (Exception ex) {
            Logger.getLogger(PanelPrijava.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        dtpUlaska = new com.github.lgooddatepicker.components.DatePicker();
        dtpIzlaska = new com.github.lgooddatepicker.components.DatePicker();
        cmbNacinPrevoza = new javax.swing.JComboBox<>();
        cmbDrzava = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtIme = new javax.swing.JTextField();
        txtBrPasosa = new javax.swing.JTextField();
        txtJmbg = new javax.swing.JTextField();
        txtPrezime = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDrzave = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        btnDodajJos = new javax.swing.JButton();
        btnKrajDodavanja = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(650, 400));
        setPreferredSize(new java.awt.Dimension(650, 400));
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.PAGE_AXIS));

        jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.LINE_AXIS));

        jPanel4.setMinimumSize(new java.awt.Dimension(300, 300));
        jPanel4.setPreferredSize(new java.awt.Dimension(300, 300));
        jPanel4.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 24, 0, 37);
        jPanel4.add(dtpUlaska, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 24, 0, 37);
        jPanel4.add(dtpIzlaska, gridBagConstraints);

        cmbNacinPrevoza.setMinimumSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 71;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 24, 0, 37);
        jPanel4.add(cmbNacinPrevoza, gridBagConstraints);

        cmbDrzava.setMinimumSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 71;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 24, 6, 37);
        jPanel4.add(cmbDrzava, gridBagConstraints);

        jLabel1.setText("Datum ulaska:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 0);
        jPanel4.add(jLabel1, gridBagConstraints);

        jLabel2.setText("Datum izlaska:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 0);
        jPanel4.add(jLabel2, gridBagConstraints);

        jLabel3.setText("Nacin prevoza:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(21, 19, 0, 0);
        jPanel4.add(jLabel3, gridBagConstraints);

        jLabel4.setText("Drzava:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 19, 0, 0);
        jPanel4.add(jLabel4, gridBagConstraints);

        jLabel5.setText("Prezime:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 20, 0, 0);
        jPanel4.add(jLabel5, gridBagConstraints);

        jLabel6.setText("JMBG:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 20, 0, 0);
        jPanel4.add(jLabel6, gridBagConstraints);

        jLabel7.setText("Broj pasosa:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(15, 20, 0, 0);
        jPanel4.add(jLabel7, gridBagConstraints);

        jLabel8.setText("Ime:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(13, 20, 0, 0);
        jPanel4.add(jLabel8, gridBagConstraints);

        txtIme.setMinimumSize(new java.awt.Dimension(100, 20));
        txtIme.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 76;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 24, 0, 0);
        jPanel4.add(txtIme, gridBagConstraints);

        txtBrPasosa.setMinimumSize(new java.awt.Dimension(100, 20));
        txtBrPasosa.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 76;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 24, 0, 0);
        jPanel4.add(txtBrPasosa, gridBagConstraints);

        txtJmbg.setMinimumSize(new java.awt.Dimension(100, 20));
        txtJmbg.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 76;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 24, 0, 0);
        jPanel4.add(txtJmbg, gridBagConstraints);

        txtPrezime.setMinimumSize(new java.awt.Dimension(100, 20));
        txtPrezime.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 76;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 24, 0, 0);
        jPanel4.add(txtPrezime, gridBagConstraints);

        jPanel3.add(jPanel4);

        jPanel5.setPreferredSize(new java.awt.Dimension(350, 300));

        tblDrzave.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Naziv"
            }
        ));
        tblDrzave.setMaximumSize(new java.awt.Dimension(300, 250));
        jScrollPane1.setViewportView(tblDrzave);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)
                .addGap(17, 17, 17))
        );

        jPanel3.add(jPanel5);

        add(jPanel3);

        jPanel1.setMinimumSize(new java.awt.Dimension(600, 100));
        jPanel1.setPreferredSize(new java.awt.Dimension(600, 100));

        btnDodajJos.setText("Dodaj jos");
        btnDodajJos.setMaximumSize(new java.awt.Dimension(150, 25));
        btnDodajJos.setMinimumSize(new java.awt.Dimension(150, 25));
        btnDodajJos.setPreferredSize(new java.awt.Dimension(150, 25));
        btnDodajJos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDodajJosActionPerformed(evt);
            }
        });
        jPanel1.add(btnDodajJos);

        btnKrajDodavanja.setText("Kraj dodavanja");
        btnKrajDodavanja.setEnabled(false);
        btnKrajDodavanja.setMaximumSize(new java.awt.Dimension(150, 25));
        btnKrajDodavanja.setMinimumSize(new java.awt.Dimension(150, 25));
        btnKrajDodavanja.setPreferredSize(new java.awt.Dimension(150, 25));
        btnKrajDodavanja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKrajDodavanjaActionPerformed(evt);
            }
        });
        jPanel1.add(btnKrajDodavanja);

        add(jPanel1);
    }// </editor-fold>//GEN-END:initComponents

    private void btnDodajJosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDodajJosActionPerformed
        Boolean postojiJMBG = false;
        try {
            List<Korisnik> korisnici = Controller.getInstance().getListKorisnici();
            for (Korisnik k : korisnici) {
                if (k.getJmbg().equals(txtJmbg.getText())) {
                    postojiJMBG = true;
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(Register.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (!txtIme.getText().equals("") && !txtPrezime.getText().equals("")
                && !txtBrPasosa.getText().equals("") && postojiJMBG
                && dtpUlaska.getDate() != null && dtpIzlaska.getDate() != null
                && dtpUlaska.getDate().isAfter(LocalDate.now()) && dtpUlaska.getDate().isBefore(dtpIzlaska.getDate())
                && Integer.valueOf(String.valueOf(ChronoUnit.DAYS.between(dtpUlaska.getDate(), dtpIzlaska.getDate()))) <= 90) {
            txtIme.setEnabled(false);
            txtPrezime.setEnabled(false);
            txtJmbg.setEnabled(false);
            txtBrPasosa.setEnabled(false);
            dtpUlaska.setEnabled(false);
            dtpIzlaska.setEnabled(false);
            cmbNacinPrevoza.setEnabled(false);
            TableModel tm = tblDrzave.getModel();
            DefaultTableModel dtm = (DefaultTableModel) tm;
            Object[] red = {cmbDrzava.getSelectedItem()};
            dtm.addRow(red);
            btnKrajDodavanja.setEnabled(true);
        } else {
            JOptionPane.showMessageDialog(this, "Sva polja moraju biti popunjena.\n"
                    + "Putovanje moze trajati maksimalno 90 dana.\nNe sme biti vec definisano putovanje za dati period.", "", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnDodajJosActionPerformed
//    Korisnik korisnik;
    private void btnKrajDodavanjaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKrajDodavanjaActionPerformed
        try {
            List<StavkaPrijave> drzave = new LinkedList<StavkaPrijave>();
            TableModel tm = tblDrzave.getModel();
            DefaultTableModel dtm = (DefaultTableModel) tm;
            for (int i = 0; i < tblDrzave.getRowCount(); i++) {
                StavkaPrijave s = new StavkaPrijave();
                s.setRb(Long.valueOf(String.valueOf(i + 1)));
                s.setDrzava(new DrzavaEu(((DrzavaEu) (tblDrzave.getValueAt(i, 0))).getId(), ((DrzavaEu) tblDrzave.getValueAt(i, 0)).getNaziv()));
                drzave.add(s);
            }
            Korisnik k = new Korisnik(txtIme.getText(), txtPrezime.getText(), txtJmbg.getText(), txtBrPasosa.getText());
            k.setId(Controller.getInstance().getKorisnikId(k));
//            this.korisnik=k;
            PrijavaPutovanja pp = new PrijavaPutovanja(LocalDate.now(), dtpUlaska.getDate(), dtpIzlaska.getDate(),
                    Integer.valueOf(String.valueOf(ChronoUnit.DAYS.between(dtpUlaska.getDate(), dtpIzlaska.getDate()))),
                    k, (NacinPrevoza) cmbNacinPrevoza.getSelectedItem(), drzave);

            List<PrijavaPutovanja> prijave = Controller.getInstance().getListPrijavaPutovanja(k);
            for (PrijavaPutovanja p : prijave) {
                List<StavkaPrijave> stavke = Controller.getInstance().getStavkePrijave(p);
                for (StavkaPrijave d : drzave) {
                    if (stavke.contains(d)
                            && ((p.getDatumUlaska().isBefore(dtpIzlaska.getDate())
                            && p.getDatumUlaska().isAfter(dtpUlaska.getDate()))
                            || (p.getDatumIzlaska().isBefore(dtpIzlaska.getDate())
                            && p.getDatumIzlaska().isAfter(dtpUlaska.getDate()))
                            || (p.getDatumIzlaska().isAfter(dtpUlaska.getDate())
                            && p.getDatumUlaska().isBefore(dtpUlaska.getDate())))) {
                        JOptionPane.showMessageDialog(this, "Greska.", "", JOptionPane.INFORMATION_MESSAGE);
                        txtIme.setText("");
                        txtPrezime.setText("");
                        txtJmbg.setText("");
                        txtBrPasosa.setText("");
                        dtpUlaska.setDate(null);
                        dtpIzlaska.setDate(null);

                        dtm.setRowCount(0);

                        txtIme.setEnabled(true);
                        txtPrezime.setEnabled(true);
                        txtJmbg.setEnabled(true);
                        txtBrPasosa.setEnabled(true);
                        dtpUlaska.setEnabled(true);
                        dtpIzlaska.setEnabled(true);
                        cmbNacinPrevoza.setEnabled(true);

                        return;
                    }
                }

            }

            Controller.getInstance().createPrijava(pp);
            JOptionPane.showMessageDialog(this, "Uspesna prijava.", "", JOptionPane.INFORMATION_MESSAGE);

            String prijavaFajl = "prijava_" + pp.getKorisnik().getJmbg() + ".txt";

            try (PrintWriter fileWriter = new PrintWriter(new FileWriter(prijavaFajl))) {
                fileWriter.println("Ime i prezime: " + pp.getKorisnik().getIme());
                fileWriter.println("Zemlje odredišta: " + pp.getDrzave());
                fileWriter.println("JMBG: " + pp.getKorisnik().getJmbg());
                fileWriter.println("Broj pasoša: " + pp.getKorisnik().getBroj_pasosa());
                fileWriter.println("Datum ulaska u EU: " + pp.getDatumUlaska());
                fileWriter.println("Datum izlaska iz EU: " + pp.getDatumIzlaska());
                fileWriter.println("Način prevoza: " + pp.getNacinPrevoza().getNaziv());
                Integer brojDana = Integer.parseInt(String.valueOf(ChronoUnit.DAYS.between(pp.getDatumUlaska(), pp.getDatumIzlaska())));
                fileWriter.println("Broj dana boravka: " + brojDana);
                if (isAgeBetween18And70(pp.getKorisnik().getJmbg())) {
                    fileWriter.println("Status: Plaća prijavu.");
                } else {
                    fileWriter.println("Status: Ne plaća prijavu.");
                }
                
            }

            txtIme.setText("");
            txtPrezime.setText("");
            txtJmbg.setText("");
            txtBrPasosa.setText("");
            dtpUlaska.setDate(null);
            dtpIzlaska.setDate(null);

            dtm.setRowCount(0);

            txtIme.setEnabled(true);
            txtPrezime.setEnabled(true);
            txtJmbg.setEnabled(true);
            txtBrPasosa.setEnabled(true);
            dtpUlaska.setEnabled(true);
            dtpIzlaska.setEnabled(true);
            cmbNacinPrevoza.setEnabled(true);

        } catch (Exception ex) {
            Logger.getLogger(PanelPrijava.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnKrajDodavanjaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDodajJos;
    private javax.swing.JButton btnKrajDodavanja;
    private javax.swing.JComboBox<DrzavaEu> cmbDrzava;
    private javax.swing.JComboBox<NacinPrevoza> cmbNacinPrevoza;
    private com.github.lgooddatepicker.components.DatePicker dtpIzlaska;
    private com.github.lgooddatepicker.components.DatePicker dtpUlaska;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblDrzave;
    private javax.swing.JTextField txtBrPasosa;
    private javax.swing.JTextField txtIme;
    private javax.swing.JTextField txtJmbg;
    private javax.swing.JTextField txtPrezime;
    // End of variables declaration//GEN-END:variables

    private void napuniCmbNacinPrevoza() throws Exception {
        List<NacinPrevoza> prevozi = Controller.getInstance().getListNacinPrevoza();
        for (NacinPrevoza n : prevozi) {
            cmbNacinPrevoza.addItem(n);
        }
    }

    private void napuniCmbDrzave() throws Exception {
        List<DrzavaEu> drzave = Controller.getInstance().getListDrzave();
        for (DrzavaEu d : drzave) {
            cmbDrzava.addItem(d);
        }
    }
    
       public boolean isAgeBetween18And70(String jmbg) {
        if (jmbg == null || jmbg.length() != 13) {
            throw new IllegalArgumentException("JMBG mora imati tačno 13 cifara.");
        }

        String day = jmbg.substring(0, 2);
        String month = jmbg.substring(2, 4);
        String year = jmbg.substring(4, 7);

        int yearPrefix = year.startsWith("0") || year.startsWith("9") ? 2000 : 1900;
        int fullYear = yearPrefix + Integer.parseInt(year);

        LocalDate birthDate;
        try {
            birthDate = LocalDate.of(fullYear, Integer.parseInt(month), Integer.parseInt(day));
        } catch (Exception e) {
            throw new IllegalArgumentException("JMBG sadrži nevalidan datum.");
        }

        LocalDate today = LocalDate.now();

        long age = ChronoUnit.YEARS.between(birthDate, today);

        return age >= 18 && age <= 70;
    }

}
