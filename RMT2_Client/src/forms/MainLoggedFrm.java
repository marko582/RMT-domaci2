/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package forms;

import controller.Controller;
import domain.Korisnik;
import domain.PrijavaPutovanja;
import domain.StavkaPrijave;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Windows HD
 */
public class MainLoggedFrm extends javax.swing.JFrame {

    /**
     * Creates new form MainFrm
     */
    Korisnik korisnik;
    public MainLoggedFrm(Korisnik korisnik) throws IOException {
        initComponents();
        this.setLocationRelativeTo(null);
        this.korisnik=korisnik;
        Controller.getInstance();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelMain = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        meni = new javax.swing.JMenu();
        menuPrijava = new javax.swing.JMenuItem();
        menuPrikaz = new javax.swing.JMenuItem();
        menuLogout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        panelMain.setPreferredSize(new java.awt.Dimension(700, 400));
        panelMain.setLayout(new java.awt.BorderLayout());
        getContentPane().add(panelMain);

        meni.setText("Meni");

        menuPrijava.setText("Prijava putovanja");
        menuPrijava.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPrijavaActionPerformed(evt);
            }
        });
        meni.add(menuPrijava);

        menuPrikaz.setText("Prikazi putovanje");
        menuPrikaz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPrikazActionPerformed(evt);
            }
        });
        meni.add(menuPrikaz);

        menuLogout.setText("Odjavi se");
        menuLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuLogoutActionPerformed(evt);
            }
        });
        meni.add(menuLogout);

        jMenuBar1.add(meni);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuPrikazActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPrikazActionPerformed
        try {
            fillTable();
        } catch (Exception ex) {
            Logger.getLogger(MainLoggedFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuPrikazActionPerformed

    private void menuLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuLogoutActionPerformed
        this.dispose();
        try {
            new MainFrm().setVisible(true);
        } catch (IOException ex) {
            Logger.getLogger(MainLoggedFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuLogoutActionPerformed

    private void menuPrijavaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPrijavaActionPerformed
        panelMain.removeAll();
        panelMain.setLayout(new BorderLayout());
        PanelPrijavaLogged panel1 = new PanelPrijavaLogged(korisnik);
        panelMain.add(panel1);
        this.pack();
        revalidate();
        repaint();  
    }//GEN-LAST:event_menuPrijavaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu meni;
    private javax.swing.JMenuItem menuLogout;
    private javax.swing.JMenuItem menuPrijava;
    private javax.swing.JMenuItem menuPrikaz;
    private javax.swing.JPanel panelMain;
    // End of variables declaration//GEN-END:variables

    private void fillTable() throws Exception {
        List<PrijavaPutovanja> prijave = Controller.getInstance().getListPrijavaPutovanja(korisnik);
        System.out.println("korisnik: ==="+korisnik);
        String [] kolone = {"id","Datum prijave","Datum ulaska","Datum izlaska","Trajanje","Nacina prevoza","status"};
        panelMain.removeAll();
        panelMain.setLayout(new BorderLayout());
        JTable tabela = new JTable();
        DefaultTableModel dtm =new DefaultTableModel();
        dtm.setRowCount(0);
        for(int i=0;i<kolone.length;i++){
            dtm.addColumn(kolone[i]);
        }
        if(prijave!=null){
            for(PrijavaPutovanja pp : prijave){
                System.out.println(pp.getId()+" "+ pp.getKorisnik());
                String status="zavrsena";
                if(pp.getDatumUlaska().isBefore(LocalDate.now())){
                    status = "zavrsena";
                }else if(pp.getDatumUlaska().minusDays(2).isBefore(LocalDate.now())){
                    status="zakljucana";
                }else{
                    status = "u obradi";
                }
                Object[] red = {pp.getId(),pp.getDatumPrijave(),pp.getDatumUlaska(),pp.getDatumIzlaska(),
                pp.getTrajanje(),pp.getNacinPrevoza().getNaziv(),status};
                dtm.addRow(red);
            }
        }

        tabela.setModel(dtm);
        JScrollPane scrollPane = new JScrollPane(tabela);
        panelMain.add(scrollPane);
        JButton btnIzmeni = new JButton("Izmeni");
        btnIzmeni.setPreferredSize(new Dimension(100, 30)); 
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        buttonPanel.add(btnIzmeni);
        panelMain.add(buttonPanel, BorderLayout.SOUTH);
        
        this.pack();
        revalidate();
        repaint(); 
        
        btnIzmeni.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Integer selektovanRed;
                selektovanRed=tabela.getSelectedRow();
                PrijavaPutovanja izabranaPrijava = new PrijavaPutovanja();
                for(int i=0;i<dtm.getRowCount();i++){
                    if(i==selektovanRed){
                        izabranaPrijava = prijave.get(i);
                    }
                }
                
                
            if(selektovanRed!=-1){
                if(izabranaPrijava.getDatumUlaska().minusDays(2).isAfter(LocalDate.now())){
                    
                
                    try {
                        IzmenaPrijave ipf = new IzmenaPrijave(MainLoggedFrm.this,true,izabranaPrijava);
                        ipf.setVisible(true);
                        ipf.addWindowListener(new WindowAdapter() {
                            @Override
                            public void windowClosed(WindowEvent e) {
                                dtm.setRowCount(0);
                                List<PrijavaPutovanja> prijave=null;
                                try {
                                    prijave = Controller.getInstance().getListPrijavaPutovanja(korisnik);
                                }catch (Exception ex) {
                                    Logger.getLogger(MainLoggedFrm.class.getName()).log(Level.SEVERE, null, ex);
                                }
                                for(PrijavaPutovanja pp : prijave){
                                    String status="zavrsena";
                                    if(pp.getDatumUlaska().isBefore(LocalDate.now())){
                                        status = "zavrsena";
                                    }else if(pp.getDatumUlaska().minusDays(2).isBefore(LocalDate.now())){
                                        status="zakljucana";
                                    }else{
                                        status = "u obradi";
                                    }
                                    Object[] red = {pp.getId(),pp.getDatumPrijave(),pp.getDatumUlaska(),pp.getDatumIzlaska(),
                                        pp.getTrajanje(),pp.getNacinPrevoza().getNaziv(),status};
                                    dtm.addRow(red);
                                }
                                
                            }
                            
                            
                        });
                    } catch (Exception ex) {
                        Logger.getLogger(MainLoggedFrm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }else
                {
                    JOptionPane.showMessageDialog(null, "Ne moze da se menja 48h pre ulaska u zemlju","Greska",JOptionPane.INFORMATION_MESSAGE);
                }
        }
        else{
            JOptionPane.showMessageDialog(null, "Selektujete red za izmenu","Greska",JOptionPane.INFORMATION_MESSAGE);
        }
        }
      });
    }
}
